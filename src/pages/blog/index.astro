---
// Blog index page - demonstrating SSR with API data fetching
// Enable SSR for this page to fetch fresh data on each request
export const prerender = false;

import Layout from '../../layouts/Layout.astro';
import Hero from '../../components/Hero.astro';
import BlogPost from '../../components/BlogPost.astro';
import Card from '../../components/Card.astro';

// This demonstrates SSR - data is fetched at request time
// We'll fetch blog posts from JSONPlaceholder API
let posts = [];
let error = null;

try {
  const response = await fetch('https://jsonplaceholder.typicode.com/posts');
  if (response.ok) {
    const allPosts = await response.json();
    // Get first 12 posts for the main blog page
    posts = allPosts.slice(0, 12);
  } else {
    throw new Error(`HTTP ${response.status}`);
  }
} catch (e) {
  error = e instanceof Error ? e.message : 'An unknown error occurred';
  console.error('Failed to fetch posts:', e);
}

// Group posts by categories for demonstration
const featuredPosts = posts.slice(0, 3);
const recentPosts = posts.slice(3, 9);
---

<Layout title="Blog - Astro Learning" description="Explore our blog posts fetched dynamically using SSR">
  <!-- Hero Section -->
  <Hero 
    title="üìù Dynamic Blog"
    subtitle="Posts fetched at request time using SSR (Server-Side Rendering)"
  >
  </Hero>

  {error ? (
    <!-- Error State -->
    <section class="py-16 max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <Card title="‚ùå Error Loading Posts">
        <p class="text-red-600 mb-4">Failed to fetch blog posts: {error}</p>
        <p class="text-gray-600">
          This demonstrates error handling in SSR. In a production app, you might want to:
        </p>
        <ul class="list-disc list-inside mt-2 text-gray-600">
          <li>Show cached content</li>
          <li>Retry the request</li>
          <li>Fall back to static content</li>
        </ul>
      </Card>
    </section>
  ) : (
    <>
      <!-- Featured Posts -->
      <section class="py-16 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-12">
          <h2 class="text-3xl font-bold text-gray-900 mb-4">‚≠ê Featured Posts</h2>
          <p class="text-lg text-gray-600">
            Highlighting the latest content from our API
          </p>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
          {featuredPosts.map((post: any) => (
            <BlogPost 
              id={post.id}
              title={post.title}
              body={post.body}
              userId={post.userId}
              excerpt={true}
              showMeta={true}
            />
          ))}
        </div>
      </section>

      <!-- Recent Posts -->
      <section class="py-16 bg-gray-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 class="text-3xl font-bold text-gray-900 text-center mb-12">üìö Recent Posts</h2>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {recentPosts.map((post: any) => (
              <BlogPost 
                id={post.id}
                title={post.title}
                body={post.body}
                userId={post.userId}
                excerpt={true}
                showMeta={false}
              />
            ))}
          </div>
          
          <!-- Load More Section -->
          <div class="text-center mt-12">
            <p class="text-gray-600 mb-4">
              Want to see more? Check out individual posts with dynamic routing!
            </p>
            <div class="flex flex-wrap justify-center gap-4">
              {[1, 2, 3, 4, 5].map((id: number) => (
                <a 
                  href={`/blog/${id}`}
                  class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors"
                >
                  Post #{id}
                </a>
              ))}
            </div>
          </div>
        </div>
      </section>

      <!-- SSR Information -->
      <section class="py-16">
        <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <Card title="üîÑ Understanding SSR in Astro" padding="lg">
            <div class="space-y-4">
              <p class="text-gray-700">
                This blog page demonstrates <strong>Server-Side Rendering (SSR)</strong>. Here's what happens:
              </p>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                <div class="bg-blue-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-blue-900 mb-2">üî® At Request Time:</h4>
                  <ul class="text-sm text-blue-800 space-y-1">
                    <li>‚Ä¢ Server fetches data from API</li>
                    <li>‚Ä¢ HTML is generated on-demand</li>
                    <li>‚Ä¢ Fresh content every time</li>
                    <li>‚Ä¢ SEO-friendly</li>
                  </ul>
                </div>
                
                <div class="bg-green-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-green-900 mb-2">‚ö° Benefits:</h4>
                  <ul class="text-sm text-green-800 space-y-1">
                    <li>‚Ä¢ Dynamic content</li>
                    <li>‚Ä¢ Real-time data</li>
                    <li>‚Ä¢ Personalization</li>
                    <li>‚Ä¢ Server-side logic</li>
                  </ul>
                </div>
              </div>
              
              <div class="bg-gray-100 p-4 rounded-lg mt-6">
                <pre class="text-sm text-gray-800"><code>{`// In your .astro file
const response = await fetch('https://api.example.com/posts');
const posts = await response.json();

// This runs on the server for each request!`}</code></pre>
              </div>
            </div>
          </Card>
        </div>
      </section>
    </>
  )}
</Layout>
